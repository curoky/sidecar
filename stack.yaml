version: '3.9'

volumes:
  data-volume:
  log:

services:
  # Port: 4000x
  postgres:
    image: postgres:14
    restart: unless-stopped
    ports:
      - 40001:5432
    volumes: # Don't remove permanent storage for index database files!
      - data-volume:/var/lib/postgresql/data/
    environment:
      POSTGRES_USER: cicada
      POSTGRES_PASSWORD: cicada
      POSTGRES_DB: core
    networks:
      - custom

  # Port: 401xx
  zookeeper:
    build:
      context: .
      dockerfile: ./app/zookeeper/Dockerfile
    restart: unless-stopped
    ports:
      - 40100:2181
    networks:
      - custom

  # Port: 4011x
  ui_zk:
    image: elkozmon/zoonavigator
    restart: unless-stopped
    ports:
      - 40110:40110
    environment:
      HTTP_PORT: 40110
      CONNECTION_x_NAME: zookeeper
      CONNECTION_x_CONN: zookeeper:2181
      AUTO_CONNECT_CONNECTION_ID: x
    depends_on:
      - zookeeper
    networks:
      - custom

  # Port: 402xx
  mysql:
    image: mysql:8
    # NOTE: use of "mysql_native_password" is not recommended: https://dev.mysql.com/doc/refman/8.0/en/upgrading-from-previous-series.html#upgrade-caching-sha2-password
    # (this is just an example, not intended to be a production configuration)
    command: --default-authentication-plugin=mysql_native_password
    restart: unless-stopped
    volumes:
      - ./app/mysql/conf/:/etc/mysql/conf.d/
    ports:
      - '40200:40200'
    environment: # https://dev.mysql.com/doc/refman/5.7/en/environment-variables.html
      MYSQL_ROOT_PASSWORD: cicada
      MYSQL_TCP_PORT: 40200
    networks:
      custom:
        ipv4_address: '172.20.0.22'

  # Port: 403xx
  mongo:
    image: mongo
    restart: always
    ports:
      - 40300:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    networks:
      - custom

  # mongo-express:
  #   image: mongo-express
  #   restart: always
  #   ports:
  #     - 40301:8081
  #   environment:
  #     ME_CONFIG_MONGODB_ADMINUSERNAME: root
  #     ME_CONFIG_MONGODB_ADMINPASSWORD: example
  #     ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
  #   depends_on:
  #     - mongo

  mongo-express:
    build:
      context: .
      dockerfile: ./app/mongo-express/Dockerfile
    restart: always
    ports:
      - 40301:8081
    depends_on:
      - mongo
    networks:
      - custom

  # Port: 404xx
  redis:
    image: redis:7
    restart: always
    ports:
      - 40400:6379
    volumes:
      - ./app/redis/conf/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - custom

  redis-commander:
    image: ghcr.io/joeferner/redis-commander:latest
    restart: always
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - '40401:8081'
    depends_on:
      - redis
    networks:
      - custom

  # Port: 405xx
  # rocksdb:

  # Port: 406xx
  # elasticsearch

  # Port: 407xx
  # etcd:

  # Port: 408xx
  kafka:
    build:
      context: .
      dockerfile: ./app/kafka/Dockerfile
    restart: unless-stopped
    ports:
      - '40800:40800'
    depends_on:
      - zookeeper
    networks:
      custom:
        ipv4_address: '172.20.0.19'

  # Port: 4081x
  ui_kafka_1:
    image: obsidiandynamics/kafdrop
    restart: unless-stopped
    # ports:
    #   - '40810:9000'
    environment:
      KAFKA_BROKERCONNECT: kafka:40800
    depends_on:
      - kafka
    networks:
      custom:
        ipv4_address: '172.20.0.21'

  # Port: 4082x
  ui_kafka_2:
    image: quay.io/cloudhut/kowl:master
    restart: unless-stopped
    ports:
      - '40820:8080'
    environment:
      KAFKA_BROKERS: kafka:40800
    depends_on:
      - kafka
    networks:
      - custom

  # Port: 409xx
  canal:
    build:
      context: .
      dockerfile: ./app/canal/Dockerfile
    restart: unless-stopped
    volumes:
      - ./output/app/canal/logs:/opt/canal/logs
    ports:
      - '40900:40900'
    depends_on:
      - kafka
    networks:
      custom:
        ipv4_address: '172.20.0.23'

  # Port: 419xx
  adminer:
    image: adminer:4
    restart: unless-stopped
    ports:
      - 41900:8080
    networks:
      - custom

  # Port: 420xx dfs: 4200x yarn: 4201x
  hadoop:
    build:
      context: .
      dockerfile: ./app/hadoop/Dockerfile
    hostname: hadoop
    image: curoky/sidecar:hadoop
    restart: unless-stopped
    ports:
      - 42001:42001
      - 42002:42002
      # - 42012:42012
      - 42016:42016
    networks:
      custom:
        ipv4_address: '172.20.0.20'

  # Port: 421xx
  hive:
    build:
      context: .
      dockerfile: ./app/hive/Dockerfile
    restart: unless-stopped
    depends_on:
      - hadoop
    networks:
      - custom

  # Port: 431xx
  httpbin:
    image: kennethreitz/httpbin
    restart: unless-stopped
    ports:
      - '43100:80'
    networks:
      - custom

  # Port: 432xx
  spark:
    build:
      context: .
      dockerfile: ./app/spark/Dockerfile
    image: curoky/sidecar:spark
    restart: unless-stopped
    ports:
      - '43201:43201'
    depends_on:
      - hadoop
    networks:
      custom:
        ipv4_address: '172.20.0.32'

  # Port: 433xx
  flink:
    build:
      context: .
      dockerfile: ./app/flink/Dockerfile
    restart: unless-stopped
    ports:
      - '62101:62101'
    depends_on:
      - hadoop
    networks:
      custom:
        ipv4_address: '172.20.0.33'

  # Port: 434xx
  fluentd:
    build:
      context: .
      dockerfile: ./app/fluentd/Dockerfile
    volumes:
      - ./output/logs:/var/log/app
    depends_on:
      - elasticsearch
      - warmup
    # links:
    #   - 'elasticsearch'
    ports:
      - '43400:24224'
      - '43400:24224/udp'
    networks:
      - custom

  # Port: 435xx
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.4.3
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - http.port=9200
      - http.cors.enabled=true
      - http.cors.allow-origin="*"
      - http.cors.allow-headers="*"
      - http.cors.allow-credentials=true
      - bootstrap.memory_lock=true
      - 'ES_JAVA_OPTS=-Xms512m -Xmx512m'
    expose:
      - '43500'
    ports:
      - '43500:9200'
    networks:
      - custom

  # Port: 436xx
  # kibana:
  #   image: docker.elastic.co/kibana/kibana:8.4.3

  #   volumes:
  #      - ./app/kibana/conf/kibana.yml:/usr/share/kibana/config/kibana.yml
  #   depends_on:
  #     - elasticsearch
  #   network_mode: "host"
  #   ports:
  #     - '43600:5601'

  # Port: 437xx
  elasticsearch_ui_dejavu:
    image: appbaseio/dejavu
    depends_on:
      - elasticsearch
    ports:
      - '43700:1358'
    networks:
      - custom

  warmup:
    build:
      context: .
      dockerfile: ./warmup/Dockerfile
    volumes:
      - ./output/logs:/var/log/app
    depends_on:
      - kafka
      - spark
      - flink
    networks:
      - custom

networks:
  custom:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
